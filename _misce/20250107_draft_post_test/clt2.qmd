---
title: "Central limit theorem and sampling distribution"
author: "Generated by ChatGPT"
date: "`r Sys.Date()`"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
#| warning: false

renv::use(lockfile = "renv.lock", verbose = FALSE)
# renv::use(lockfile = "posts/20250104_function_derivatives/renv.lock", verbose = FALSE)
library(tidyverse)
library(patchwork)
library(gt)
library(scales)
```

When performing an experiment, measurements are made to In scientific research, we are usually interested in estimating population parameters such as mean, median, standard deviation and more. However, obtaining measurements from the entire population is almost impossible. The reason is that measuring the whole population is very expensive and time consuming.

Instead, we draw samples from the population and use statistics to estimate parameters of population based on the samples.

Since the same parameters (i.e. mean, median, ...) are used for both population and samples, a standard notion is used to distinguish them: population parameters are denoted with Greek letters, while sample parameters with Roman letters @tbl-stat-notion.

| Parameter          | Population | Sample    |
|--------------------|------------|-----------|
| Mean               | μ (mu)     | x̄ (x-bar) |
| Standard Deviation | σ (sigma)  | s         |
| Variance           | σ²         | s²        |
| Size               | N          | n         |

: Statistical notion for population and sample parameters {#tbl-stat-notion}

# Central limit theorem

::: callout-important
The central limit theorem (CLT) states that sampling distribution of the sample mean approaches normal distribution as the sample size increases regardless of the population distribution.

set.seed(123456) pop \<- tibble(population = rnorm(n = 100000, mean = 0, sd = 1)) pop_stat \<- pop %\>% summarise( across(population, list( mu = mean, sigma = sd, max_bin = (x) max_bin_count(x, 0.1) ), .names = "{.fn}" ) )

area_data = tibble(x = c(pop_stat$mu - pop_stat$sigma, pop_stat$mu + pop_stat$sigma),y = c(pop_stat$max_bin, pop_stat$max_bin)) segment_data = tibble(x = pop_stat$mu, y = 0, yend = pop_stat$max_bin)

pop %\>% ggplot(aes(population)) + geom_histogram(binwidth = 0.1, fill = "lightblue", color = "gray65") + geom_area(data = area_data, aes(x = x, y = y, fill = "mu %+-% sigma"), alpha = 0.4) + geom_segment(data = segment_data, aes(x = x, y = 0, yend = yend, linetype = "mu"), color = "red", linewidth = 0.8) + scale_fill_manual(values = "green3", name = "Spread", labels = label_parse()) + scale_linetype_manual(values = "22", name = "Centrality", labels = label_parse())

c(pop_stat$mu + 1:3*pop_stat$sigma)

pops \<- expand_grid(N, func) pops \<- pops %\>% mutate(N = set_names(N, names(func)))

d1 \<- pops %\>% mutate(distribution = names(func), .before = func) %\>% rowwise() %\>% mutate(population = map(N, func)) %\>% mutate(across( population, list( mu = mean, sigma = sd, min = min, max = max, max_bin = (x) max_bin_count(x, binwidth = binwidth) ), .names = "{.fn}" )) %\>% mutate( histo_data = list(tibble(value = population)), area_data = list(tibble(x = c(mu - sigma, mu + sigma),y = c(max_bin, max_bin))), segment_data = list(tibble(x = mu, y = 0, yend = max_bin)), \# limits = list(c(mu - 2*sigma, mu + 2*sigma)) limits = list(c(min, max)) ) %\>% ungroup()

d2 \<- d1 %\>% mutate( histogram = pmap(list(histo_data, area_data, segment_data, limits, N), (h,a,s,l,n) { h %\>% ggplot(aes(value)) + geom_histogram(binwidth = binwidth, fill = "lightblue", color = "gray65") + geom_area(data = a, aes(x = x, y = y, fill = "mu %+-% sigma"), alpha = 0.4) + geom_segment(data = s, aes(x = x, y = 0, yend = yend, linetype = "mu"), color = "red", linewidth = 0.8) + scale_fill_manual(values = "green3", name = "Spread", labels = label_parse()) + scale_linetype_manual(values = "22", name = "Centrality", labels = label_parse()) + scale_x_continuous(limits = l) + ggtitle(str_glue("n = {n}")) + ct }))
:::

There are 3 main points are important from this:

1.  Sampling distribution of the sample mean is normal

2.  As the sample size increases the distribution approaches normal distribution

3.  The assumption holds true regardless of the population distribution

To demonstrate all 3 points, we will use a population of adult female height. From the data we know that population has mean of 162cm and standard deviation of 6cm.

::: callout-note
In reality we almost never have population data (otherwise we wont need statistics), but we used here a well known population to demonstrate principles of CLT
:::

@fig-hei-pop show population of x,y

```{r}
max_bin_count <- function(x, binwidth = NULL, nbin = NULL) {
  min_bound <- x %>% min() %>% floor()
  max_bound <- x %>% max() %>% ceiling() + binwidth
  breaks <- seq(min_bound, max_bound, binwidth) - binwidth / 2
  bins = cut(x, breaks = breaks)
  # if you want max bins do bellow
  table(bins) %>% max()
}

max_nbin_count <- function(x, bins = 30, closed = "right") {
  stopifnot(length(range(x, na.rm = TRUE)) == 2)
  
  bins <- as.integer(bins)
  if (bins < 1) {
    stop("Need at least one bin.", call. = FALSE)
  }
  
  # Extract min/max range
  x_range <- range(x, na.rm = TRUE)
  
  # Compute bin width **exactly like ggplot2**
  if (diff(x_range) == 0) {
    width <- 0.1  # Handle edge case where all values are identical
  } else if (bins == 1) {
    width <- diff(x_range)
    boundary <- x_range[1]
  } else {
    width <- (x_range[2] - x_range[1]) / (bins - 1)  # ✅ Matches ggplot2 bin width calculation
  }
  
  # Compute boundary (EXACT ggplot2 logic)
  shift <- floor((x_range[1] - (width / 2)) / width)
  boundary <- (width / 2) + shift * width  # ✅ Aligns with ggplot2 bins
  
  # Compute max_x using floating-point correction
  max_x <- x_range[2] + (1 - 1e-08) * width  # ✅ Ensures max(x) fits inside last bin
  
  # Compute final bin breaks
  breaks <- seq(boundary, max_x, by = width)
  
  bins_cut <- cut(x, breaks = breaks, include.lowest = TRUE, right = TRUE)
  
  return(max(table(bins_cut)))
}

```

```{r}
#| label: fig-hei-pop
#| fig-cap: Histrogram of ...
#| warning: false
#| fig-height: 3

N <- 10000 # population size (the simulated population will have 100000 observations)
mu <- 162    # poplatuon mean
sigma <- 6  # population standard deviation

set.seed(123456) # set random seed to ensure reproducibility
population <- tibble(
  height = rnorm(n = N, mean = mu, sd = sigma), 
  observation = seq_along(height)
)

binwidth <- 0.5

plot_df <- population %>% 
  mutate(
    max_bin_count = max_bin_count(height, binwidth = binwidth),
    mu = mean(height),
    sigma = sd(height),
    mu_sigma_left = mu - sigma,
    mu_sigma_right = mu + sigma
  )

p_histo <- plot_df %>% 
  ggplot(aes(x = height)) + 
  geom_histogram(binwidth = binwidth, fill = "lightblue", color = "gray") +
  geom_segment(
    data = plot_df %>% select(mu, max_bin_count) %>% unique(),
    aes(x = mu, y = 0, yend = max_bin_count, linetype = "mu"),
    color = "blue", linewidth = 1
  ) + 
  geom_area(
    data = plot_df %>% 
      select(mu_sigma_left, mu_sigma_right, max_bin_count) %>% 
      unique() %>% 
      reframe(
        x = c(mu_sigma_left, mu_sigma_right),
        y = c(max_bin_count, max_bin_count)
      ),
    aes(x = x, y = y, fill = "mu ~ '±' ~ sigma"),
    alpha = 0.2) +
  scale_linetype_manual(
    values = "dashed",
    name = "Centrality",
    labels = scales::label_parse()) +
  scale_fill_manual(
    values = "red",
    name = "Spread",
    labels = scales::label_parse()
  ) +
  coord_cartesian(expand = FALSE)
```

## Sampling distribution of the sample mean is normal

Lets draw a sample of size 5 from the height population

So the mean of the sample is. However in order to have a distribution of the the sample means, there need to be more sample means. Hence lets draw 25 samples from the population

```{r}
n <- c(3,5,10,30) %>% set_names()
sample <- paste0("X", 1:1000)

samples <- map(n, \(n) {
  map(sample, \(sample) {
   print(str_glue("n = {n}, sample = {sample}"))
    population %>% 
      select(height) %>% 
      mutate(height = round(height,2)) %>% 
      slice_sample(n = n) %>% 
      add_column(n = n, sample = sample)
      # mutate(xbar = mean(height), s = sd(height))
  })
})

plot_df <- map(samples, list_rbind)

plot_df <- map(
  plot_df, \(df) 
  df %>% summarise(
    .by = c(n, sample), 
    xbar = mean(height) %>% round(2), 
    s = sd(height) %>% round(2),
    sample_value = ifelse(length(height) <= 5, 
                          str_c(height, collapse = ","), 
                          str_glue('{str_c(height[1:5], collapse = ",")}, ...'))
  )
)

plot_df <- map(
  plot_df, \(df)
  df %>% mutate(
    max_bin_count = max_bin_count(xbar, binwidth = binwidth),
    mu_xbar = mean(xbar) %>% round(2),
    sigma_xbar = sd(xbar) %>% round(2),
    mu_xbar_sigma_xbar_left = mu_xbar - sigma_xbar,
    mu_xbar_sigma_xbar_right = mu_xbar + sigma_xbar
  )
)

histo_plot <- map(
  plot_df, \(plot_df) {
    n = plot_df$n %>% unique()
    custom_legend <- grid::textGrob(str_glue("n = {n}"))
    plot_df %>% 
      ggplot(aes(x = xbar)) + 
      geom_histogram(binwidth = binwidth, fill = "lightblue") +
      geom_segment(
        data = plot_df %>% select(mu_xbar, max_bin_count) %>% unique(),
        aes(x = mu_xbar, y = 0, yend = max_bin_count, linetype = "mu_xbar"),
        color = "blue", linewidth = 1
      ) + 
      geom_area(
        data = plot_df %>% 
          select(mu_xbar_sigma_xbar_left, mu_xbar_sigma_xbar_right, max_bin_count) %>% 
          unique() %>% 
          reframe(
            x = c(mu_xbar_sigma_xbar_left, mu_xbar_sigma_xbar_right),
            y = c(max_bin_count, max_bin_count)
          ),
        aes(x = x, y = y, fill = "xbar ~ '±' ~ s"),
        alpha = 0.2) +
      scale_linetype_manual(
        values = "dashed",
        name = "Centrality",
        labels = scales::label_parse()) +
      scale_fill_manual(
        values = "red",
        name = "Spread",
        labels = scales::label_parse()
      ) + 
      scale_x_continuous(limits = c(162-1.5*6,162+1.5*6)) + 
      guides(custom = guide_custom(title = "Size", grob = custom_legend))
    }
  )

tab <- map(
  plot_df,
  \(x)
  x %>% 
    select(sample, sample_value, xbar) %>% 
    mutate(across(everything(), as.character)) %>% 
    add_row(sample = "...", sample_value = "...", xbar = "...", .after = 8) %>% 
    slice(c(seq(n_obs+1), seq(nrow(x) - n_obs, nrow(x)))) %>% 
    gt() %>%
    cols_label(xbar = "{{x\u0304}}") %>%
    cols_align(align = "center") %>%
    tab_style(
      style = cell_borders(
        sides = c("left", "right"),
        color = "black",
        weight = px(1.5),
        style = "solid"
      ),
      locations = cells_body()
    ) %>%
    wrap_table(space = "fixed")
)


plot_id <- 2


histo_plot[[plot_id]] + tab[[plot_id]]



df_sum <- list_rbind(plot_df)
df_sum %>% 
  select(n, mu_xbar, sigma_xbar) %>% 
  unique() %>% 
  ggplot(aes(x = n, y = sigma_xbar)) + 
  geom_point()


df_sum %>% ggplot(aes(x = n, y = xbar)) + geom_point()


tab <- map(
  tbl_df,
  \(x)
  x %>%
    gt() %>%
    cols_label(xbar = "{{x\u0304}}") %>%
    cols_align(align = "center") %>%
    tab_style(
      style = cell_borders(
        sides = c("left", "right"),
        color = "black",
        weight = px(1.5),
        style = "solid"
      ),
      locations = cells_body()
    ) %>%
    wrap_table(space = "fixed")
)

final_plot <- map2(tab, plot, \(x,y) x + y)

final_plot[[1]]
```

```{r}
ct <- theme(
  axis.title = element_blank(),
  axis.text = element_blank(),
  axis.ticks = element_blank(), legend.position = "bottom",
  legend.title = element_blank()
)

nbin <- 40
binwidth <- 0.02
N <- 100000

func <- c(
  "normal" = \(x) rnorm(x, mean = 0.5, sd = 0.1),
  # "exp" = rexp,
  "uniform" = \(x) runif(x, min = 0, max = 1),
  # "gamma" = \(x) rgamma(x, shape = 5, scale = 1),
  "skewed" = \(x) rbeta(x,2,6)
)

pops <- expand_grid(N, func)
pops <- pops %>% mutate(N = set_names(N, names(func)))

d1 <- pops %>% 
  mutate(distribution = names(func), .before = func) %>% 
  rowwise() %>% 
  mutate(population = map(N, func)) %>% 
  mutate(across(
    population,
    list(
      mu = mean,
      sigma = sd,
      min = min,
      max = max,
      max_bin = \(x) max_bin_count(x, binwidth = binwidth)
    ),
    .names = "{.fn}"
  )) %>% 
  mutate(
    histo_data = list(tibble(value = population)),
    area_data = list(tibble(x = c(mu - sigma, mu + sigma),y = c(max_bin, max_bin))),
    segment_data = list(tibble(x = mu, y = 0, yend = max_bin)),
    # limits = list(c(mu - 2*sigma, mu + 2*sigma))
    limits = list(c(min, max))
  ) %>% ungroup()

d2 <- d1 %>% 
  mutate(
    histogram = 
      pmap(list(histo_data, area_data, segment_data, limits, N), \(h,a,s,l,n) {
        h %>% 
          ggplot(aes(value)) + 
          geom_histogram(binwidth = binwidth, fill = "lightblue", color = "gray65") +
          geom_area(data = a, aes(x = x, y = y, fill = "mu %+-% sigma"), alpha = 0.4) +
          geom_segment(data = s, aes(x = x, y = 0, yend = yend, linetype = "mu"), color = "red", linewidth = 0.8) +
          scale_fill_manual(values = "green3", name = "Spread", labels = label_parse()) +
          scale_linetype_manual(values = "22", name = "Centrality", labels = label_parse()) +
          scale_x_continuous(limits = l) +
          ggtitle(str_glue("n = {n}")) +
          ct
      }))

n <- c(3,5,10,30)
sample_id <- paste0("X", 1:10000)

sample_grid <- 
  expand_grid(
    d2 %>% select(distribution, limits), 
    n, 
    sample_id
  )

df <- 
  sample_grid %>% 
  rowwise() %>% 
  mutate(sample = list(sample(d1$population[[distribution]], size = n)), xbar = mean(sample)) %>% 
  ungroup()

# compute statistics
df1 <- df %>%
  mutate(
    .by = c(distribution, n),
    sigma_xbar = sd(xbar),
    mu_xbar = mean(xbar),
    max_bin = max_bin_count(xbar, binwidth = binwidth)
  ) %>% 
  nest(.by = -matches("^(sample_id|sample|xbar)$"), histo_data = xbar) %>% 
  rowwise() %>% 
  mutate(
    area_data = list(
      tibble(
        x = c(mu_xbar - sigma_xbar, mu_xbar + sigma_xbar),
        y = c(max_bin, max_bin),
      )
    ),
    segment_data = list(tibble(x = mu_xbar, y = 0, yend = max_bin))
  ) %>% ungroup()

df2 <- df1 %>% 
  mutate(
    histogram = 
      pmap(list(histo_data, area_data, segment_data, limits, n), \(h, a, s, l, n) {
        h %>% 
          ggplot(aes(xbar)) + 
          geom_histogram(binwidth = binwidth, fill = "lightblue", color = "gray65") + 
          geom_area(data = a, aes(x = x, y = y, fill = "mu[bar(x)] %+-% S.E.M"), alpha = 0.5) + 
          geom_segment(data = s, aes(x = x, y = 0, yend = yend, linetype = "mu[bar(x)]"), color = "blue", linewidth = 0.8) +
          scale_fill_manual(values = "orange", name = "Spread", labels = label_parse()) +
          scale_linetype_manual(values = "22", name = "Centrality", labels = label_parse()) +
          ggtitle(str_glue("n = {n}")) +
          coord_cartesian(xlim = l) +
          ct
      }))

pop <- d2 %>% select(distribution, histogram, N)
sam <- df2 %>% select(distribution, histogram, n)

pfin <- bind_rows(pop, sam) %>% arrange(distribution)

wrap_plots(pfin$histogram, ncol = length(func), byrow = F) / 
  guide_area() + 
  plot_layout(guides = "collect", heights = c(1, 0.05)) &
  theme(legend.box = "horizontal", legend.key.size = unit(0.8,"cm"), legend.text = element_text(size = 15))

```

```{r}
set.seed(123456)
pop <- tibble(population = rnorm(n = 100000, mean = 0, sd = 1))
pop_stat <- pop %>% summarise(
  across(population, list(
    mu = mean,
    sigma = sd,
    max_bin = \(x) max_bin_count(x, 0.1)
    ), .names = "{.fn}"
  )
)

area_data = tibble(x = c(pop_stat$mu - pop_stat$sigma, pop_stat$mu + pop_stat$sigma),y = c(pop_stat$max_bin, pop_stat$max_bin))
segment_data = tibble(x = pop_stat$mu, y = 0, yend = pop_stat$max_bin)


pop %>% 
  ggplot(aes(population)) + 
  geom_histogram(binwidth = 0.1, fill = "lightblue", color = "gray65") +
  geom_area(data = area_data, aes(x = x, y = y, fill = "mu %+-% sigma"), alpha = 0.4) +
  geom_segment(data = segment_data, aes(x = x, y = 0, yend = yend, linetype = "mu"), color = "red", linewidth = 0.8) +
  scale_fill_manual(values = "green3", name = "Spread", labels = label_parse()) +
  scale_linetype_manual(values = "22", name = "Centrality", labels = label_parse())

c(pop_stat$mu + 1:3*pop_stat$sigma)
    
    

pops <- expand_grid(N, func)
pops <- pops %>% mutate(N = set_names(N, names(func)))

d1 <- pops %>% 
  mutate(distribution = names(func), .before = func) %>% 
  rowwise() %>% 
  mutate(population = map(N, func)) %>% 
  mutate(across(
    population,
    list(
      mu = mean,
      sigma = sd,
      min = min,
      max = max,
      max_bin = \(x) max_bin_count(x, binwidth = binwidth)
    ),
    .names = "{.fn}"
  )) %>% 
  mutate(
    histo_data = list(tibble(value = population)),
    area_data = list(tibble(x = c(mu - sigma, mu + sigma),y = c(max_bin, max_bin))),
    segment_data = list(tibble(x = mu, y = 0, yend = max_bin)),
    # limits = list(c(mu - 2*sigma, mu + 2*sigma))
    limits = list(c(min, max))
  ) %>% ungroup()

d2 <- d1 %>% 
  mutate(
    histogram = 
      pmap(list(histo_data, area_data, segment_data, limits, N), \(h,a,s,l,n) {
        h %>% 
          ggplot(aes(value)) + 
          geom_histogram(binwidth = binwidth, fill = "lightblue", color = "gray65") +
          geom_area(data = a, aes(x = x, y = y, fill = "mu %+-% sigma"), alpha = 0.4) +
          geom_segment(data = s, aes(x = x, y = 0, yend = yend, linetype = "mu"), color = "red", linewidth = 0.8) +
          scale_fill_manual(values = "green3", name = "Spread", labels = label_parse()) +
          scale_linetype_manual(values = "22", name = "Centrality", labels = label_parse()) +
          scale_x_continuous(limits = l) +
          ggtitle(str_glue("n = {n}")) +
          ct
      }))


```
